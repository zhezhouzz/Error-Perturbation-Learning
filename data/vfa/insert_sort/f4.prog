let i_err = (7, [0;3;4;6;5])
Pre
let spec (x:int) (l:int list) (u:int) (v:int) = ((implies (not (v == u)) ((implies ((last l v)&&(ord l u v)) (not (v < u)))&&(implies ((not (last l v))&&(ord l v u)) (v < u))))&&((not (mem l x))&&(implies ((not (last l v))&&(ord l u v)) (u < v))))
Perturbation
IN: (x0: int, x1: int list) {
(x2: int) = list_lower_bound(x1: int list);
(x3: int list) = cons(x2: int, x1: int list);
(x4: int list) = cons(x0: int, x3: int list);
(x5: int) = list_lower_bound(x4: int list)}
OUT: (x5: int, x1: int list)

Default
IN: (x0: int, x1: int list) {
(x2: int list, x3: int list) = list_alter_partition(x1: int list);
(x4: int) = list_upper_bound(x3: int list);
(x5: int list) = append(x2: int list, x4: int);
(x6: int list) = append(x5: int list, x4: int)}
OUT: (x0: int, x6: int list)