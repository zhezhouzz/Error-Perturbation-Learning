let i_err = (7, [0;3;4;6;5])
Pre
let spec (x:int) (l:int list) (u:int) (v:int) = ((if (v == u) then true else (if (last l v) then (if (ord l u v) then (if (v < u) then (not true) else true) else true) else (if (ord l v u) then (if (v < u) then true else (not true)) else true)))&&((not (mem l x))&&(implies ((not (last l v))&&(ord l u v)) (u < v))))
Perturbation
IN: (x0: int, x1: int list) {
(x2: int list) = append(x1: int list, x0: int);
(x3: int) = list_lower_bound(x2: int list);
(x4: int list) = cons(x3: int, x1: int list);
(x5: int, x6: int list) = list_destruct(x4: int list)}
OUT: (x5: int, x6: int list)

Pre
let spec (x:int) (l:int list) (u:int) (v:int) = ((if (v == u) then true else (if (last l v) then (if (ord l u v) then (if (v < u) then (not true) else true) else true) else (if (ord l v u) then (if (v < u) then true else (not true)) else true)))&&((not (mem l x))&&(implies ((not (last l v))&&(ord l u v)) (u < v))))
Perturbation
IN: (x0: int, x1: int list) {
(x2: int, x3: int list) = list_destruct(x1: int list);
(x4: int list) = cons(x2: int, x3: int list);
(x5: int) = minus1(x0: int);
(x6: int) = minus1(x5: int)}
OUT: (x6: int, x4: int list)

Default
IN: (x0: int, x1: int list) {
(x2: int list) = append(x1: int list, x0: int);
(x3: int) = list_lower_bound(x2: int list);
(x4: int) = plus1(x3: int);
(x5: int) = minus1(x4: int)}
OUT: (x5: int, x1: int list)