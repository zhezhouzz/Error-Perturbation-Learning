let i_err = ([1;2], [3;4])
Pre
let spec (x0:int list) (x1:int list) (u:int) (v:int) = implies ((hd x0 u) && (hd x1 v)) (u < v)
Perturbation
IN: (x0: int list, x1: int list) {
(x2: int, x3: int list) = list_destruct(x0: int list);
(x4: int) = minus1(x2: int);
(x5: int list) = cons(x4: int, x3: int list)}
OUT: (x5: int list, x1: int list)

Pre
let spec (x0:int list) (x1:int list) (u:int) (v:int) = implies ((last x0 u) && (last x1 v)) (v < u)
Perturbation
IN: (x0: int list, x1: int list) {
(x2: int list, x3: int) = list_last_destruct(x0: int list);
(x4: int) = plus1(x3: int);
(x5: int list) = append(x2: int list, x4: int)}
OUT: (x5: int list, x1: int list)

Pre
let spec (x0:int list) (x1:int list) = true
Perturbation
IN: (x0: int list, x1: int list) {
(x2: int) = list_upper_bound(x0: int list);
(x3: int list) = append(x0: int list, x2: int)}
OUT: (x3: int list, x1: int list)

Pre
let spec (x0:int list) (x1:int list) = true
Perturbation
IN: (x0: int list, x1: int list) {
(x2: int) = list_lower_bound(x0: int list);
(x3: int list) = cons(x2: int, x0: int list);
(x4: int) = list_lower_bound(x1: int list);
(x5: int list) = cons(x4: int, x1: int list)}
OUT: (x3: int list, x5: int list)

Default
IN: (x0: int list, x1: int list) {}
OUT: (x1: int list, x0: int list)