Pre
let spec (x0:int) (x1:int list) (u:int) (v:int) = true
Perturbation
IN: (x0: int, x1: int tree) {
(x2: int tree) = tree_rec_flip(x1: int tree)}
OUT: (x0: int, x2: int tree)

Pre
let spec (x0:int) (x1:int list) (u:int) (v:int) = true
Perturbation
IN: (x0: int, x1: int tree) {
(x2: int) = minus1(x0: int);
(x3: int) = minus1(x2: int);
(x4: int) = minus1(x3: int);
(x5: int) = minus1(x4: int)}
OUT: (x5: int, x1: int tree)

Default
IN: (x0: int, x1: int tree) {
(x2: int tree) = tree_node(x0: int, x1: int tree, x1: int tree);
(x3: int tree) = tree_node(x0: int, x2: int tree, x2: int tree);
(x4: int tree) = tree_rotation_right(x3: int tree);
(x5: int) = minus1(x0: int)}
OUT: (x5: int, x4: int tree)