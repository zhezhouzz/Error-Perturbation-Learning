open Primitive
open Basic_dt
module F = Feature
module T = Tp
module V = Value
open Label

type vec = bool array

open Cctx

module RealSample = struct
  let values_to_vec_ { args; qv; fset; _ } values =
    let vars = args @ qv in
    let make_env vars value =
      List.fold_left
        (fun m ((_, name), v) -> StrMap.add name v m)
        StrMap.empty (List.combine vars value)
    in
    List.map (fun vec -> vec)
    @@ List.map
         (fun value ->
           let m = make_env vars value in
           Array.of_list @@ List.map (fun feature -> F.eval feature m) fset)
         values

  let values_to_vec ctx args_values =
    let qv_values = List.map (fun i -> V.I i) Randomgen.paddled_small_nums in
    let qvs_values = List.choose_n qv_values (List.length ctx.qv) in
    let values =
      List.map (fun a -> List.map (fun b -> a @ b) qvs_values) args_values
    in
    List.map (fun value -> values_to_vec_ ctx value) values
end

let add_vecs_always fvtab vecs =
  List.iter (fun (v, label) -> Hashtbl.add fvtab v label) vecs

let add_vecs_if_new fvtab vecs =
  List.fold_left
    (fun (dup, updated) (v, label) ->
      match Hashtbl.find_opt fvtab v with
      | Some label' ->
          if Label.eq_label label' label then (dup + 1, updated)
          else (dup, updated)
      | None ->
          Hashtbl.add fvtab v label;
          (dup, updated + 1))
    (0, 0) vecs

let layout_bool x = if x then "✓" else "𐄂"

let layout_vecs vecs =
  List.fold_lefti
    (fun table i (vec, label) ->
      let vec = List.split_by_comma layout_bool (Array.to_list vec) in
      Printf.sprintf "%s\n%s: %s [%i]" table (layout_label label) vec i)
    "" vecs

let layout_fvctx { args; qv; fset; fvtab } =
  let args =
    Printf.sprintf "args: %s\n" @@ List.split_by_comma Tp.layouttvar args
  in
  let qv = Printf.sprintf "qv: %s\n" @@ List.split_by_comma Tp.layouttvar qv in
  let fset = Printf.sprintf "fset: %s\n" @@ F.layout_set fset in
  let labeled_vecs = layout_vecs @@ List.of_seq @@ Hashtbl.to_seq fvtab in
  Printf.sprintf "%s%s%s%s\n" args qv fset labeled_vecs
